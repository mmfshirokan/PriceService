// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/mmfshirokan/PriceService/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// RedisCasher is an autogenerated mock type for the RedisCasher type
type RedisCasher struct {
	mock.Mock
}

type RedisCasher_Expecter struct {
	mock *mock.Mock
}

func (_m *RedisCasher) EXPECT() *RedisCasher_Expecter {
	return &RedisCasher_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, key
func (_m *RedisCasher) Get(ctx context.Context, key string) (model.Price, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.Price
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Price, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Price); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(model.Price)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisCasher_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type RedisCasher_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *RedisCasher_Expecter) Get(ctx interface{}, key interface{}) *RedisCasher_Get_Call {
	return &RedisCasher_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *RedisCasher_Get_Call) Run(run func(ctx context.Context, key string)) *RedisCasher_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RedisCasher_Get_Call) Return(_a0 model.Price, _a1 error) *RedisCasher_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisCasher_Get_Call) RunAndReturn(run func(context.Context, string) (model.Price, error)) *RedisCasher_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, obj
func (_m *RedisCasher) Set(ctx context.Context, obj model.Price) error {
	ret := _m.Called(ctx, obj)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Price) error); ok {
		r0 = rf(ctx, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisCasher_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type RedisCasher_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - obj model.Price
func (_e *RedisCasher_Expecter) Set(ctx interface{}, obj interface{}) *RedisCasher_Set_Call {
	return &RedisCasher_Set_Call{Call: _e.mock.On("Set", ctx, obj)}
}

func (_c *RedisCasher_Set_Call) Run(run func(ctx context.Context, obj model.Price)) *RedisCasher_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Price))
	})
	return _c
}

func (_c *RedisCasher_Set_Call) Return(_a0 error) *RedisCasher_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisCasher_Set_Call) RunAndReturn(run func(context.Context, model.Price) error) *RedisCasher_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewRedisCasher creates a new instance of RedisCasher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisCasher(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisCasher {
	mock := &RedisCasher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
